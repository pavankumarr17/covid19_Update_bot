# -*- coding: utf-8 -*-
"""covid_update_bot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15z7r152Mv4beyXVm_cdpNmrckghEgVvG
"""

#PAVAN KUMAR R

#pip install bs4
#pip install slackclient
import requests #send html requests
from bs4 import BeautifulSoup #align html data and for data scraping
import json
from tabulate import tabulate #converting data to tabular form
from datetime import datetime
import time
import schedule #for scheduling time to update the cases

pip install schedule

#"https://www.mygov.in/covid-19/" website used to get the update cases

#sending the message to slack channel
def slack_channel():
    def slack_message(msg):
        webhook_url = "https://hooks.slack.com/services/<enter ur webhook slack url>"
        payload = { 'text': msg }
        return requests.post(webhook_url, headers={'Content-Type': 'application/json'}, data=json.dumps(payload))
    return slack_message

#function 
def corona_updateCases():

    api_link = "https://www.mygov.in/covid-19/"
    req_api_link = requests.get(api_link) 

    complete_web_data = req_api_link.text
    #print(complete_web_data)

    soup_data = BeautifulSoup(complete_web_data, 'html.parser')
    #print(soup_data.prettify())
    mydata = ""
    div_class = soup_data.find_all('div', {"class": "views-row"}) #data scraping

    #eachrow_data = []
    for div in div_class:
      data = div.get_text()
      data = data[1:]
      mydata += data

    state_list = mydata.split('\n\n\n')

    complete_data_list = []
    #segragating all data.. and filtering required list
    for state in state_list:
        have_list = []
        if len(state) > 1:
          each_state = state.split('\n')
          for val in each_state:
            if len(val) > 1:
              have_list.append(val)
        complete_data_list.append(have_list)

    SHORT_HEADERS = ['STATE', 'TOTAL CASES', 'CONFIRMED', 'ACTIVE', 'DISCHARGED', 'DEATH', 'VACCINATION']

    table = tabulate(complete_data_list, headers=SHORT_HEADERS, tablefmt='psql')
    current_time = datetime.now().strftime('%d/%m/%Y %H:%M')
    print('The updated covid-19 cases details at:\n')
    print(current_time)
    print('\n')
    print(table)
    slack_text = f'The updated covid-19 cases details at:\n```{current_time}```\n\n```{table}```'
    slack_channel()(slack_text)



if __name__ == '__main__':
  schedule.every().day.at("10:00").do(corona_updateCases)
  while True:
    schedule.run_pending()
    time.sleep(1)
  #corona_updateCases()